.TH MAN_3_PRINTF 3 "24 April 2023" "14:16"  "Project printf"

.SH NAME
_printf - format and print data

.SH SYNOPSIS
#include <stdio.h>
#include <stdarg.h>

int _printf(const char *format, ...);

.SH DESCRIPTION
The _printf function produces output according to a format as described below.

The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream, and conversion specifications, each of which results in fetching zero or more subsequent arguments.

The conversion specifications are introduced by the % character. The arguments must correspond properly (after type promotion) with the conversion specifier. By default, the arguments are used in the order given, where each '*' and each conversion specifier consumes the next argument. However, it is possible to specify the argument order to be used explicitly, as well as to specify a minimum field width and precision.

The following conversion specifiers are supported:

.TP 5
\fBc\fP
The int argument is converted to an unsigned char and printed.

.TP 5
\fBs\fP
The const char * argument is expected to be a pointer to an array of character type (pointer to a string). Characters from the array are written up to (but not including) a terminating null byte ('\0'); if a precision is specified, no more than the number specified are written. If a precision is given, no null byte need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a terminating null byte.

.TP 5
\fB%\fP
A '%' is written. No argument is converted. The complete conversion specification is '%%'.

.SH RETURN VALUE
Upon successful return, these functions return the number of characters printed (excluding the null byte used to end output to strings), otherwise, a negative value is returned.

.SH SEE ALSO
printf(3), putchar(3), puts(3), scanf(3), vprintf(3), wprintf(3)

.SH NOTES
This manual page was written by [Oukmi Fatima Zahra] for the Project Name project.

